function addSineEquation(name) {
  const brac = (content, index) => ({
    brac: [`lb${index}`, content, `rb${index}`],
  });

  const top = (content, comment, symbol) => ({
    topComment: {
      content,
      comment,
      symbol,
      commentSpace: 0.2,
      commentLineSpace: 0.2,
      contentLineSpace: 0.2,
      inSize: false,
    },
  });
  const box = (content, symbol, inSize = false, space = 0.02) => ({
    box: {
      content, symbol, inSize, space,
    },
  });

  figure.add({
    name,
    make: 'equation',
    scale: 4,
    position: [4, 8],
    color: colorLight,
    elements: {
      sin: { style: 'normal' },
      lb1: { symbol: 'bracket', side: 'left', lineWidth: 0.07, width: 0.16 },
      rb1: { symbol: 'bracket', side: 'right', lineWidth: 0.07, width: 0.16 },
      lb2: { symbol: 'bracket', side: 'left', lineWidth: 0.07, width: 0.16 },
      rb2: { symbol: 'bracket', side: 'right', lineWidth: 0.07, width: 0.16 },
      lb3: { symbol: 'bracket', side: 'left', lineWidth: 0.07, width: 0.16 },
      rb3: { symbol: 'bracket', side: 'right', lineWidth: 0.07, width: 0.16 },
      lb4: { symbol: 'bracket', side: 'left', lineWidth: 0.07, width: 0.16 },
      rb4: { symbol: 'bracket', side: 'right', lineWidth: 0.07, width: 0.16 },
      lb7: { symbol: 'squareBracket', side: 'left', lineWidth: 0.05, width: 0.16 },
      rb7: { symbol: 'squareBracket', side: 'right', lineWidth: 0.05, width: 0.16 },
      pi: 'π',
      pi1: 'π',
      pi2: 'π',
      x_r: { color: colorZero },
      zero_r: { text: '0', color: colorZero },
      x_b: { color: colorOne },
      one_b: { text: '1', color: colorOne },
      x_b1: { color: colorOne },
      one_b1: { text: '1', color: colorOne },
      equals: '  =  ',
      equals1: '  =  ',
      w1: '\u03c9',
      min1: ' \u2212 ',
      min2: ' \u2212 ',
      min3: ' \u2212 ',
      comma1: ' , ',
      comma2: ' , ',
      comma3: ' , ',
      lambda: '\u03bb',
      lambda1: '\u03bb',
      arrow1: { symbol: 'line', width: 0.04, arrow: { start: { head: 'triangle' } } },
      arrow2: { symbol: 'line', width: 0.04, arrow: { start: { head: 'triangle' } } },
      vin1: { symbol: 'vinculum', lineWidth: 0.05 },
      vin2: { symbol: 'vinculum', lineWidth: 0.05 },
      brace: { symbol: 'brace', side: 'bottom', lineWidth: 0.05 },
      box: { symbol: 'box', lineWidth: 0.04 },
    },
    phrases: {
      x0r: { sub: ['x_r', 'zero_r'] },
      x1b: { sub: ['x_b', 'one_b'] },
      x1bToX: { sub: ['x_b', 'one_b'] },
      t1_11: { sub: ['t_1', '_1_1']},
      t1_12: { sub: ['t_2', '_1_2']},
      x1_11: { sub: ['x_b1', 'one_b1']},
      yx0t: ['y', brac(['x0r', 'comma1', 't_3'], 1)],
      yx0tmt1: ['y', brac(['x0r', 'comma1', 't_4', 'min1', 't1_11'], 1)],
      yx1t: ['y_1', brac(['x1b', 'comma2', ' ', 't_5'], 2)],
      _2pf: ['2', 'pi', 'f'],
      _2pf1: ['2_1', 'pi1', 'f_1'],
      _2pf2: ['2_2', 'pi2', 'f_2'],
      _2pf2OnV: ['2_2', 'pi2', '  ', { frac: ['f_2', 'vin1', 'v'] }, ' '],
      _2pf2OnVBox: ['2_2', 'pi2', '  ', top(
        { box: [{ frac: ['f_2', 'vin1', 'v'] }, 'box', false, 0.02] },
        { frac: ['_1_4', 'vin2', 'lambda'] },
        'arrow1',
      ), ' '],
      _2pf2OnLambda: ['2_2', 'pi2', '  ', { frac: ['_1_4', 'vin2', 'lambda'] }, ' '],
      _2pfOnLambda: [{ frac: [['2_2', 'pi2'], 'vin2', 'lambda'] }, ' '],
      sin2pft: ['sin', brac(['_2pf', ' ', 't_6'], 3)],
      sin2pftmt1: ['sin', brac(['_2pf', ' ', brac(['t_6', 'min2', 't1_12'], 7)], 3)],
      _2pftm2pft1: ['_2pf1', ' ', 't_3', 'min1', '_2pf2', ' ', 't1_11'],
      x1onv: { frac: ['x1_11', 'vin1', 'v'] },
      _2pftm2pft1Up: [
        '_2pf1', ' ', 't_3', 'min1', '_2pf2', '   ',
        top(box('t1_11', 'box'), 'x1onv', 'arrow1'),
      ],
      _2pftm2pftx1Onv: ['_2pf1', ' ', 't_3', 'min1', '_2pf2', ' ', 'x1onv'],
      _2pftm2pftfOnV: ['_2pf1', ' ', 't_3', 'min1', '_2pf2OnV', ' ', 'x1_11'],
      _2pftm2pftfOnVLamdaUp: ['_2pf1', ' ', 't_3', 'min1', '_2pf2OnVBox', ' ', 'x1_11'],
      _2pftm2pftfOnVLamda: ['_2pf1', ' ', 't_3', 'min1', '_2pf2OnLambda', ' ', 'x1_11'],
      _2pftm2pftLamda: ['_2pf1', ' ', 't_3', 'min1', '_2pfOnLambda', ' ', 'x1_11'],
      _2pftm2pftLamdaXUp: ['_2pf1', ' ', 't_3', 'min1', '_2pfOnLambda', ' ', 'x1_11'],
    },
    forms: {
      yx0: ['yx0t', 'equals', 'sin2pft'],
      yx1eyx0: ['yx1t', 'equals', 'yx0tmt1'],
      yx1eyx0es: ['yx1t', 'equals', 'yx0tmt1', 'equals1', 'sin2pftmt1'],
      yx1estmt1: ['yx1t', 'equals', 'sin2pftmt1'],
      yx1estmt1expandUnder: ['yx1t', 'equals', 'sin', brac({
        bottomComment: {
          content: ['_2pf', ' ', brac(['t_6', 'min2', 't1_12'], 7)],
          comment: '_2pftm2pft1',
          symbol: 'brace',
          inSize: false,
        },
      }, 3)],
      yx1estmt1expand: ['yx1t', 'equals', 'sin', brac('_2pftm2pft1', 3)],
      yx1estmt1up: ['yx1t', 'equals', 'sin', brac('_2pftm2pft1Up', 3)],
      yx1estmt1xv: ['yx1t', 'equals', 'sin', brac('_2pftm2pftx1Onv', 3)],
      yx1estmt1fOnV: ['yx1t', 'equals', 'sin', brac('_2pftm2pftfOnV', 3)],
      yx1estmt1fOnVLambdaUp: ['yx1t', 'equals', 'sin', brac('_2pftm2pftfOnVLamdaUp', 3)],
      yx1estmt1fOnVLambda: ['yx1t', 'equals', 'sin', brac('_2pftm2pftfOnVLamda', 3)],
      yx1estmt1fLambda: ['yx1t', 'equals', 'sin', brac('_2pftm2pftLamda', 3)],
    },
  });
}

